<?php

/*
 * This file is part of the Pho package.
 *
 * (c) Emre Sokullu <emre@phonetworks.org>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Pho\Kernel\Services\Index;

use Pho\Kernel\Kernel;
use Pho\Kernel\Services\Index;
use Pho\Kernel\TestCase;
use Elasticsearch\ClientBuilder;

class IndexTestsss extends TestCase
{

    protected $client;

    public function setUp()
    {
        putenv('INDEX_DB=phonetworkstest');
        putenv('INDEX_TABLE=phoindex');

        parent::setUp();
        $client = new \Elasticsearch\ClientBuilder();
        $this->client = $client->build();
    }

    public function tearDown()
    {
        //$this->client->indices()->delete(['index' => getenv('INDEX_DB')]);
    }

    public function testCreatedIndex()
    {
        $this->assertTrue($this->kernel->index()->client->indices()->exists(['index' => getenv('INDEX_DB')]));
    }

    public function testGetIndex()
    {
        $output = $this->kernel->index()->search('Value');
        $this->assertSame([], $output);
    }

    public function testAppendIndex()
    {
        $index = $this->kernel->index();
        $node = new \PhoNetworksAutogenerated\User($this->kernel, $this->kernel->graph(), "123456");
        $node->attributes()->Key = 'Value';
        
        $index->index($node, true);

        $return = $this->client->get(['index' => getenv('INDEX_DB'), 'type' => getenv('INDEX_TABLE'), 'id' => $node->id()->toString()]);
        $this->assertArrayHasKey('_source', $return);
        $this->assertArrayHasKey('attr', $return['_source']);
        $this->assertArrayHasKey(4, $return['_source']['attr']);
        $this->assertArrayHasKey('v', $return['_source']['attr'][4]);
        $this->assertSame($node->attributes()->Key, $return['_source']['attr'][4]['v']);
    }

    public function testEditIndex()
    {
        $index = $this->kernel->index();
        $node = new \PhoNetworksAutogenerated\User($this->kernel, $this->kernel->graph(), "123456");
        $node->attributes()->Key = 'Value';
        
        $index->index($node, true);

        $node->attributes()->Key = 'Some new value';
        $index->index($node);

        $return = $this->client->get(['index' => getenv('INDEX_DB'), 'type' => getenv('INDEX_TABLE'), 'id' => $node->id()->toString()]);

        $this->assertArrayHasKey('_source', $return);
        $this->assertArrayHasKey('attr', $return['_source']);
        $this->assertArrayHasKey(4, $return['_source']['attr']);
        $this->assertArrayHasKey('v', $return['_source']['attr'][4]);
        $this->assertSame($node->attributes()->Key, $return['_source']['attr'][4]['v']);
    }

}
