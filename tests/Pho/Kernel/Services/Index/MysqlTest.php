<?php

/*
 * This file is part of the Pho package.
 *
 * (c) Emre Sokullu <emre@phonetworks.org>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Pho\Kernel\Services\Index;

use Pho\Kernel\Kernel;
use Pho\Kernel\Services\Index;
use Pho\Kernel\TestCase;

class MySQLTest extends TestCase
{
    /**
     * Pho-kernel
     * @var \Pimple
     */
    protected $kernel;

    /**
     * Elasticsearch php sdk client connect
     * @var \Elasticsearch\Client
     */
    protected $client;

    protected function getKernelConfig()
    {
        return array(
            "services" => array(
                "database" => getenv('DATABASE_URI'),
                "storage"  => getenv("STORAGE_URI"),
                "index"    => getenv("INDEX_URI"),
            ),
        );
    }

    public function setUp()
    {
        if (!function_exists('mysqli_connect')) {
            $this->markTestSkipped('MySQLi excention not setted up');
        }
        $params = parse_url($this->getKernelConfig()['services']['index']);
        $this->connectToDB($params);
        if (!$this->client) {
            $this->markTestSkipped('Could not connect to MySQL database');
        }

        if (mysqli_connect_errno()) {
            $this->markTestSkipped('Could not connect to MySQL database. Reason:' . mysqli_connect_error());
        }
        return;
        parent::setUp();
    }

    public function tearDown()
    {

    }

    public function testCreatedTables()
    {
        $result = $this->client->query("SHOW TABLES LIKE 'index'");
        $this->assertSame($result->num_rows, 1);
    }

    public function testAppendIndex()
    {
        $node = new \PhoNetworksAutogenerated\User($this->kernel, $this->kernel->graph(), "123456");

        $node->attributes()->Key = 'Value';
    }

    private function connectToDB($params)
    {
        $query = isset($params['query']) ? parse_str($params['query']) : [];

        $params['host']     = isset($params['host']) ? $params['host'] : '';
        $params['user']     = isset($params['user']) ? $params['user'] : '';
        $params['pass']     = isset($params['pass']) ? $params['pass'] : '';
        $params['port']     = isset($params['port']) ? $params['port'] : '';
        $params['database'] = isset($query['database']) ? $query['database'] : '';
        $params['table']    = isset($query['table']) ? $query['table'] : '';
        $this->client       = new \mysqli($parms['host'], $params['user'], $params['pass'], '', $params['port']);

        if ($this->client) {
            $this->client->select_db($params['database']);
        }
    }

    private function getFromDB(string $id)
    {

    }

}
