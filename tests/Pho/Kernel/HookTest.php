<?php

/*
 * This file is part of the Phá»Ÿ package.
 *
 * (c) Emre Sokullu <emre@phonetworks.org>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Pho\Kernel;

class HooksTest extends TestCase
{
    public function testNodeContextException() {
        $this->doNodeFailTest("context");
    }

    public function testNodeContextRight() {
        $this->doNodeSuccessTest("context");
    }

    public function testNodeCreatorException() {
        $this->doNodeFailTest("creator");
    }

    public function testNodeCreatorRight() {
        $this->doNodeSuccessTest("creator");
    }

    public function testNodeEdge() {
        $actor = new \PhoNetworksAutogenerated\User($this->kernel, $this->graph, "123456");
        $post = $actor->post("test");
        $edge = $actor->edges()->out()->current();
        $actor_serialized = unserialize(serialize($actor));
        Hooks::setup($actor_serialized);
        $this->assertEquals(
            $edge->id()->toString(), 
            $actor_serialized->edge($edge->id())->id()->toString()
        );
    }

    public function testGraphGet() {
        $key = "get";
        $run = "id";
        $actor = new \PhoNetworksAutogenerated\User($this->kernel, $this->graph, "123456");
        $param = $actor->id();
        $graph_x = $this->graph->$key($param);
        $graph_serialized = unserialize(serialize($this->graph));
        Hooks::setup($graph_serialized);
        $this->assertEquals(
            $graph_x->$run(), 
            $graph_serialized->$key($param)->$run());
    }

    public function testGraphMembers() {
        $key = "members";
        $actor = new \PhoNetworksAutogenerated\User($this->kernel, $this->graph, "123456");
        //eval(\Psy\sh());
        $graph_x = $this->graph->$key();
        $graph_serialized = unserialize(serialize($this->graph));
        Hooks::setup($graph_serialized);
        $this->assertEquals(
            count($graph_x), 
            count($graph_serialized->$key())
        );
    }

    

    public function testEdgeFail() {
        $actor = new \PhoNetworksAutogenerated\User($this->kernel, $this->graph, "123456");
        $post = $actor->post("test");
        $edge = $actor->edges()->out()->current();
        $edge_serialized = unserialize(serialize($edge));
        $this->expectException("TypeError");
        $edge_serialized->tail();
    }

    public function testEdgeSuccess() {
        $actor = new \PhoNetworksAutogenerated\User($this->kernel, $this->graph, "123456");
        $post = $actor->post("test");
        $edge = $actor->edges()->out()->current();
        $edge_serialized = unserialize(serialize($edge));
        Hooks::setup($edge_serialized);
        $this->assertEquals(
            $edge->tail()->id()->toString(), 
            $edge_serialized->tail()->id()->toString()
        );
    }

    private function doNodeFailTest($key) {
        $actor = new \PhoNetworksAutogenerated\User($this->kernel, $this->graph, "123456");
        $actor_x_id = $actor->$key()->id()->toString();
        //$this->kernel->gs()->touch($actor);
        $this->assertEquals(
            $actor->id(), 
            $this->kernel->gs()->node($actor->id()->toString())->id()
        );
        $actor_serialized = unserialize(serialize($actor));
        $this->expectException("TypeError");
        $actor_serialized->$key();
    }

    private function doNodeSuccessTest($key) {
        $actor = new \PhoNetworksAutogenerated\User($this->kernel, $this->graph, "123456");
        $actor_x_id = $actor->$key()->id()->toString();
        //$this->kernel->gs()->touch($actor);
        $this->assertEquals(
            $actor->id(), 
            $this->kernel->gs()->node($actor->id()->toString())->id()
        );
        $actor_serialized = unserialize(serialize($actor));
        Hooks::setup($actor_serialized);
        $this->assertEquals(
            $actor_x_id, 
            $actor_serialized->$key()->id()->toString());
    }

}